import copy
from random import randint
from string import ascii_lowercase, digits, punctuation

class Keyboard:
    def __init__(self):
        self.keyboard = [
            [(), (), (), (), (), []], # Left-most Column
            [(), (), (), [], (), ()],
            [(), (), [], [], (), ()],
            [(), (), (), [], (), ()],
            [(), (), (), (), ()],     # Space bar not included
            [(), (), (), (), ()],
            [(), (), (), (), ()],
            [(), (), (), (), ()],
            [(), (), [], (), (), ()],
            [(), (), [], (), (), ()],
            [(), (), [], (), ()],
            [(), (), [], (), ()],
            [(), (), [], ()],
            [(), (), ()],
            [()],
            [()]
        ]


def random_selection(domain):
    magic_number = randint(0, len(domain) - 1)
    returned_value = domain.pop(magic_number)
    return returned_value

class DarwinianKeyboard(Keyboard):
    def __init__(self):
        super().__init__()

        available_keys = list(ascii_lowercase) + list(digits) + list(punctuation) + ["C-"] + ["M-"] + ["C-"] + ["M-"] + ["TAB"] + ["BACKSPACE"] + ["DEL"] + ["S-"] + ["SHIFT"] + ["ESC"] + ["F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "HOME", "END"]
        # [26:] can be doubled up
        
        self.keyboard_layout = copy.deepcopy(self.keyboard)
        self.home_keys = []

        for i, column in enumerate(self.keyboard):
            for j, key in enumerate(column):
                if instance(self.keyboard[i][j], tuple):
                    self.keyboard_layout[i][j] = random_selection(available_keys)
                elif instance(self.keyboard[i][j], list):
                    self.keyboard_layout[i][j] = random_selection(available_keys)
                    self.home_keys.append((i, j))

                if randint(0, 1) == 1:
                    self.keyboard_layout[i][j] = (self.keyboard_layout[i][j], random_selection(available_keys))

                
