unless := method(
    (call sender doMessage(call message argAt(0))) ifFalse(
        call sender doMessage(call message argAt(1))) ifTrue(
            call sender doMessage(call message argAt(2)))
)

fibRecursive := method(n,
        if(n == 1,
                1,
                if(n == 2,
                        1,
                        fib(n - 1) + fib(n - 2)
                )
        )
)

fibLooped := method(n,
        fibSeq := list(1, 1)
        for(i, 2, n - 1, fibSeq append(fibSeq at(i - 1) + fibSeq at(i - 2)))
        fibSeq pop
)

Number div := method(denom,
        if(denom == 0) then(
                0 println
                0
        ) else(
                self / denom println
                self / denom
        )
)

Matrix := Object clone
Matrix dim := method(x, y,
        self contents := list() preallocateToSize(y)
        for(i, 1, y,
                self contents append(list() preallocateToSize(x))
                for(j, 1, x,
                        self contents at(i - 1) append(0)
                )
        )
        self contents
)
Matrix set := method(x, y, value,
        self contents at(y) atPut(x, value)
)

Matrix get := method(x, y,
        self contents at(y) at(x)
)

Matrix print := method(
        "         " print
        for(i, 0, self contents at(0) size - 1,
                if(i == self contents at(0) size - 1) then(
                        i println
                ) else(
                        i print; ", " print
                )
        )
        for(i, 0, self contents size - 1,
                i print; " | " print
                self contents at(i) println
        )
        nil
)