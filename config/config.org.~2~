#+title: The 2.718281828-macs Configuration
#+subtitle: A configuration file geared to me.
#+author: 2e Asteroid
#+bibliography: config.json
#+cite_export: csl

* Why?
I've always been searching for some program that would just click for me: Obsidian, Vivaldi, VS Code, Vim, etc. The program should feel intuitive to me, and easy to use. However, I haven't found that program. Therefore, I'm just going to use Emacs and make the program that I'm looking for. To do that, I'm implementing a literate configuration file based on Protesilaos' configuration org-file [cite:@protesilaosstavrouEmacsAdvancedOrg2023].

* Early Initialization of Emacs (=early-init.el=)
All of the code here will be tangled to =early-init.el=.
** =early-init.el='s Basic Frame Settings
#+begin_src emacs-lisp :tangle early-init.el
    (setq frame-resize-pixelwise t
          frame-inhibit-implied-resize t
          frame-title-format '("%b")
          ring-bell-function 'ignore
          use-dialog-box t
          use-file-dialog nil
          use-short-answers t
          inhibit-splash-screen t
          inhibit-startup-screen
          inhibit-x-resources t
          inhibit-startup-echo-area-message user-login-name
          inhibit-startup-buffer-menu t)

    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (setq use-dialog-box nil
          use-file-dialog nil)
#+end_src
** =early-init.el='s Initializing the Packages
#+begin_src emacs-lisp :tangle early-init.el
  (setq package-enable-at-startup t)
#+end_src
** =early-init.el='s Initial Flash of Light
I haven't /really/ noticed this problem, but I think it does happen. I'm using Protesilaos' function, but removed dependencies.
#+begin_src emacs-lisp :tangle early-init.el
  (defun prot-emacs-avoid-initial-flash-of-light ()
    "avoid flash of light when starting emacs, if needed."
    (setq mode-line-format nil)
    (set-face-attribute 'default nil :background "#000000" :foreground #000000)
    (set-face-attribute 'mode-line nil :background "#000000" :foreground "#000000" :box 'unspecified))

  (prot-emacs-avoid-initial-flash-of-light)
#+end_src

* =init.el='s Initialization
I'm following Protesilaos' module system to sanely store my code.
** =init.el='s Theme Initialization
I'm using a theme that I made myself (and am constantly tweaking), called Crypt. To make the theme-making easier, I use autothemer, which makes it a lot more readable [cite:@systemcraftersEmacsTipsHow2020].
#+begin_src emacs-lisp :tangle init.el
  (require 'autothemer)
  (load-theme 'crypt)
#+end_src
** =init.el='s all-the-icons Support
I've read some stuff about =all-the-icons= v. =nerd-icons=, and I can say with some certainty that there's not much of a difference between them. The only differences are that =nerd-icons= is more unified, but I don't know if it supports some of what =all-the-icons= does, which is why I'm going to be using =all-the-icons=, until I find out if it /does/ support those features.
#+begin_src emacs-lisp :tangle init.el
  (require 'all-the-icons)
#+end_src
** =init.el='s Backup File Support
I think that backing up files, while not needed, might save me time in the future.
#+begin_src emacs-lisp :tangle init.el
  (setq-default delete-by-moving-to-trash t
                recentf-mode t
                make-backup-files t)
#+end_src
** =init.el='s Module Arrangements
Following Protesilaos' module system.
#+begin_src emacs-lisp :tangle init.el
  (add-to-list 'load-path (locate-user-emacs-file "modules"))
#+end_src
** =init.el='s Package Settings
I use the default =package.el= because =use-package= doesn't feel quite right.
#+begin_src emacs-lisp :tangle init.el
  (require 'package)

  (add-hook 'package-menu-mode-hook #'hl-line-mode)

  (setq package-archives
        '(("gnu-elpa" . "https://elpa.gnu.org/packages/")
          ("gnu-elpa-devel" . "https://elpa.gnu.org/devel/")
          ("nongnu" . "https://elpa.nongnu.org/nongnu/")
          ("melpa" . "https://melpa.org/packages/")))

  (setq package-archive-priorities
        '(("gnu-elpa" . 3)
          ("melpa" . 2)
          ("nongnu" . 1)))

  (setq package-install-upgrade-built-in t)
#+end_src
** =init.el='s Declare Custom Themes Safe
Emacs gives an annoying confirmation sequence whenever you load a theme, so this prevents that.
#+begin_src emacs-lisp :tangle init.el
  (setq custom-safe-themes t)
#+end_src
** =init.el='s Custom Package Manager (textbook)
I don't like =use-package=, because it parcelizes code and makes it ehh. I prefer to write actual code, with maybe only a installation package manager. Writing my own code is also fun.
#+begin_src emacs-lisp :tangle init.el
  (defun textbook-install (package &optional method)
    "installs 'package' using the optional 'method'. If 'method' is nil or 'builtin, then it won't do anything. If 'method' is a string, then it will use 'package-vc-install' to install the package. If 'method' is a list, then feed the list into 'package-vc-install'."
    (unless (or (eq method 'builtin) (null method))
      (unless (package-installed-p package)
        (when (or (stringp method) (listp method))
          (package-vc-install method))
        (unless package-archive-contents
          (package-refresh-contents))
        (package-install package))))

  (defun textbook-chapter (&rest body)
    "Returns any sexp passed to it, except for a sexp of form (:wait n), where n is a number to delay the evaluation of the code by."
    (declare (indent 0))
    (let (delay)
      (dolist (sexp body)
        (when (plistp sexp)
          (pcase (car sexp)
            (:wait (setq delay (cadr sexp)
                         body (delq sexp body))))))
      (if delay
          `(run-with-timer ,delay nil (lambda () ,body))
        `(progn ,@body))))
#+end_src
** =init.el='s Map Function to Hooks
Sometimes I want to add a function to multiple hooks. This accomplishes that.
#+begin_src emacs-lisp :tangle init.el
  (defun 2e-mapf-h (function hooks)
    (mapc (lambda (hook)
            (add-hook hook function))
          hooks))
#+end_src
** =init.el='s Loading of Modules
Here I load all of my modules.
#+begin_src emacs-lisp :tangle init.el
  (require '2e-essentials)
  (require '2e-progodoro)
#+end_src

* Emacs Configuration Modules
** The =2e-essentials.el= Module
This provides some basic settings on Emacs itself; no packages. Delaying this execution by 1 second will speed up the loading of Emacs. Also, I load in some custom libraries of helper functions.
#+begin_src emacs-lisp :tangle "modules/2e-essentials.el"
  (textbook-chapter
   (:delay 1)
   (require '2e-array)
#+end_src
*** =2e-essentials.el='s Sane Defaults
Just a bunch of random settings, most pulled from [cite:@coimbrab-coimbraMegumacs].
#+begin_src emacs-lisp :tangle "modules/2e-essentials.el" :results silent
  (setq-default ad-redifinition-action 'accept
                auto-window-vscroll nil
                confirm-kill-emacs 'y-or-n-p
                cursor-in-non-selected-windows nil
                delete-by-moving-to-trash t
                display-time-default-load-average nil
                display-time-format "%k:%M:%S (%Z)"
                fill-column 80
                help-window-select t
                indent-tabs-mode nil
                inhibit-startup-screen t
                initial-scratch-message ""
                mouse-yank-at-point t
                ns-use-srgb-colorspace nil
                select-enable-clipboard t
                sentence-end-double-space nil
                show-help-function nil
                show-trailing-whitespace t
                split-height-threshold 96
                split-width-threshold 26
                tab-width 4
                x-stretch-cursor nil
                delete-old-versions nil
                version-control t
                ring-bell-function 'ignore
                inhbit-compacting-font-caches t
                recentf-mode t
                make-backup-files t
                display-line-numbers-type 'relative
                vc-follow-symlinks t
                use-default-font-for-symbols nil
                frame-inhibit-implied-resize nil
                pop-up-windows nil
                blink-matching-paren nil
                delete-pair-blink-delay 0.1
                find-library-include-other-files nil
                tramp-connection-timeout (* 60 10)
                save-interprogram-paste-before-kill t
                mode-require-final-newline 'visit-save
                truncate-partial-width-windows nil
                eval-expression-print-length nil
                kill-do-not-save-duplicates t)

  (cd "~/")
  (delete-selection-mode 1)
  (display-time)
  (global-auto-revert-mode 1)
  (fringe-mode '(8 . 0))
  (electric-pair-mode t)
  (electric-indent-mode t)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-supword-mode 1)
  (mouse-avoidance-mode 'jump)
  (menu-bar-mode 0)
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (show-paren-mode 1)

  (add-hook 'calendar-mode-hook (lambda () (setq show-trailing-whitespace nil)))
#+end_src
*** =2e-essentials.el='s Mouse Config
Currently derived from Protesilaos' mouse configurations
#+begin_src emacs-lisp :tangle "modules/2e-essentials.el"
  (setq mouse-wheel-scroll-amount
        '(1
          ((shift) . 5)
          ((meta) . 0.5)
          ((control) . text-scale))
        mouse-drag-copy-region nil
        make-pointer-invisible t
        mouse-wheel-progressive-speed t
        mouse-wheel-follow-mouse t)

  (setq-default scroll-preserve-screen-position t
                scroll-conservatively 1
                scroll-margin 0
                next-screen-context-lines 0)

  (mouse-wheel-mode 1)
  (define-key global-map (kbd "C-M-<mouse-3>") #'tear-off-window)
#+end_src

#+RESULTS:
: tear-off-window
** The =2e-headerline.el= Module
I actually don't use the modeline. Instead, I use the header line. The header line makes it a lot easier to actually see the information, since it's about eye-level. Also it just looks a bit nicer.
#+begin_src emacs-lisp :tangle "modules/2e-headerline.el"
  (setq-default mode-line-format nil)
#+end_src
*** =2e-headerline.el='s Useful Inactive Header Line Functionality
One differing thing about the header line is that it doesn't have an inactive header-line face, which bothers me.
#+begin_src emacs-lisp :tangle "modules/2e-headerline.el"
  (defun 2e-update-header-line ()
    (mapc
     (lambda (window)
       (with-current-buffer (window-buffer window)
         ;; don't mess with buffers that don't have a header line
         (when header-line-format
           (let ((original-format (get 'header-line-format 'original))
                 (inactive-face 'mode-line-inactive)) ; change this to your favorite inactive header line face
             ;; if we didn't save original format yet, do it now
             (when (not original-format)
               (put 'header-line-format 'original header-line-format)
               (setq original-format header-line-format))
             ;; check if this window is selected, set faces accordingly
             (if (eq window (selected-window))
                 (setq header-line-format original-format)
               (setq header-line-format `(:propertize ,original-format face ,inactive-face)))))))
     (window-list)))

  (add-hook 'buffer-list-update-hook #'2e-update-header-line)
#+end_src
*** =2e-headerline.el='s String Truncation Utilities
The header line can get really long, which makes it not worthwhile. This truncates especially long parts, so that it doesn't show.
#+begin_src emacs-lisp :tangle "modules/2e-headerline.el"
  (defvar-local mode-line-truncate-length 9)

  (defun 2e-mode-line-truncate-string-p (str)
    "Returns non-nil if the string should be truncated"
    (or (< (window-total-width) split-width-threshold)
        (and (>) (length str) mode-line-truncate-length)
        (not (one-window-p :no-minibuffer))))

  (defun 2e-mode-line-truncate-string (str)
    "Returns the truncated string, else return the original string."
    (if (2e-mode-line-truncate-string-p str)
        (concat (substring str 0 mode-line-truncate-length) "...")
      str))
#+end_src
*** =2e-headerline.el='s Space Filling Utilities
Sometimes you want to right align some stuff, but you don't know how to do it. This provides an easy function to do it.
#+begin_src emacs-lisp :tangle "modules/2e-headerline.el"
  (defun 2e-mode-line-right-align (&rest right-aligned-things)
    (concat (propertize " "
                'display `(space . (:align-to (- (+ right right-fringe right-margin) ,(apply '2e-array-length right-aligned-things)))))))
#+end_src
** The =2e-array.el= Module
This module provides library functions for array functions, i.e., functions that apply over an entire list, e.g. a length function that provides the sum of all the lengths in a list.
*** =2e-array.el='s Array Length Function
#+begin_src emacs-lisp :tangle "modules/2e-array.el"
  (defun 2e-array-length (&rest args)
    "Finds the sum of all the lengths of the arguments passed into it. Works for only sequences and lists -- for lists, it'll go through the list's elements."
    (if (null (car args))
        0
      (+ (length (car args)) (apply '2e-array-length (cdr args)))))
#+end_src
** The =2e-completion.e= Module
A big part of Emacs is completion, whether for a function, or on point. I use the 'vertico' package, along with its parts, 'consult', 'embark', 'marginalia', 'orderless', 'cape', and 'corfu'.
*** =2e-completion.el='s Vertico Setup
#+begin_src emacs-lisp :tangle "modules/2e-completion.el" :results silent
  (require 'vertico-posframe)
  (vertico-mode 1)
  (vertico-posframe-mode 1)
  (vertico-reverse-mode 1)
  (vertico-mouse-mode 1)
  (setq vertico-count 15)
  (setq vertico-resize 'grow-only)
  (setq vertico-cycle t)
  (global-set-key (kbd "S-<return>") 'vertico-exit-input)

  ;; Changes the color of the minibuffer.
  (add-hook 'minibuffer-setup-hook
            (lambda ()
              (make-local-variable 'face-remapping-alist)
              (add-to-list 'face-remapping-alist '(default (:background "#261010")))))
#+end_src
*** =2e-completion.el='s Consult Setup
#+begin_src emacs-lisp :tangle "modules/2e-completion.el"
  (require 'consult)

#+end_src

* Bibliography
#+print_bibliography:
