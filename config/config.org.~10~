#+title: The 2.718281828-macs Configuration
#+subtitle: A configuration file geared to me.
#+author: 2e Asteroid
#+bibliography: config.json
#+cite_export: csl

* Why?
I've always been searching for some program that would just click for me: Obsidian, Vivaldi, VS Code, Vim, etc. The program should feel intuitive to me, and easy to use. However, I haven't found that program. Therefore, I'm just going to use Emacs and make the program that I'm looking for. To do that, I'm implementing a literate configuration file based on Protesilaos' configuration org-file [cite:@protesilaosstavrouEmacsAdvancedOrg2023].

* Early Initialization of Emacs (=early-init.el=)
All of the code here will be tangled to =early-init.el=.
** =early-init.el='s Basic Frame Settings
_src emacs-lisp :tangle early-init.el
    (setq frame-resize-pixelwise t
          frame-inhibit-implied-resize t
          frame-title-format '("%b")
          ring-bell-function 'ignore
          use-dialog-box t
          use-file-dialog nil
          use-short-answers t
          inhibit-splash-screen t
          inhibit-startup-screen
          inhibit-x-resources t
          inhibit-startup-echo-area-message user-login-name
          inhibit-startup-buffer-menu t)

    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (setq use-dialog-box nil
          use-file-dialog nil)
#+end_src
** =early-init.el='s Initializing the Packages
#+begin_src emacs-lisp :tangle early-init.el
  (setq package-enable-at-startup t)
#+end_src

#+RESULTS:
: t

** =early-init.el='s Initial Flash of Light
I haven't /really/ noticed this problem, but I think it does happen. I'm using Protesilaos' function, but removed dependencies.
#+begin_src emacs-lisp :tangle early-init.el
  (defun prot-emacs-avoid-initial-flash-of-light ()
    "avoid flash of light when starting emacs, if needed."
    (setq mode-line-format nil)
    (set-face-attribute 'default nil :background "#000000" :foreground "#000000")
    (set-face-attribute 'mode-line nil :background "#000000" :foreground "#000000" :box 'unspecified))

  (prot-emacs-avoid-initial-flash-of-light)
#+end_src

#+RESULTS:

* =init.el='s Initialization
I'm following Protesilaos' module system to sanely store my code.
** =init.el='s Theme Initialization
I'm using a theme that I made myself (and am constantly tweaking), called Alice (formerly Crypt). To make the theme-making easier, I use autothemer, which makes it a lot more readable [cite:@systemcraftersEmacsTipsHow2020].
#+begin_src emacs-lisp :tangle init.el
  (require 'auto-themer)
  (load-theme 'alice)
#+end_src

#+RESULTS:
: t

** =init.el='s all-the-icons Support
I've read some stuff about =all-the-icons= v. =nerd-icons=, and I can say with some certainty that there's not much of a difference between them. The only differences are that =nerd-icons= is more unified, but I don't know if it supports some of what =all-the-icons= does, which is why I'm going to be using =all-the-icons=, until I find out if it /does/ support those features.
#+begin_src emacs-lisp :tangle init.el
  (require 'all-the-icons)
#+end_src

#+RESULTS:
: all-the-icons

** =init.el='s Backup File Support
I think that backing up files, while not needed, might save me time in the future.
#+begin_src emacs-lisp :tangle init.el :results silent
  (setq-default delete-by-moving-to-trash t
                recentf-mode t
                make-backup-files t)
#+end_src
** =init.el='s Module Arrangements
Following Protesilaos' module system.
#+begin_src emacs-lisp :tangle init.el
  (add-to-list 'load-path (locate-user-emacs-file "modules"))
#+end_src

#+RESULTS:
| ~/.emacs.d/modules | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/2048-game-20230809.356 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/academic-phrases-20180723.1021 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/ace-jump-buffer-20171031.1550 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/ace-window-20220911.358 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/alert-toast-20220312.229 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/all-the-icons-completion-20230617.1206 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/all-the-icons-20230909.2053 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/async-20231206.600 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/auctex-lua-20151121.1610 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/autothemer-20230414.1419 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/avy-20230420.404 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/blackjack-20230821.41 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/brainfuck-mode-20150113.842 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/chemtable-20230314.1825 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/citeproc-20231212.1538 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/company-20231208.1730 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/corfu-1.0 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/dashboard-20231201.922 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/ddate-20221031.1611 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/display-wttr-20221102.1426 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/eat-0.9.3 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/eldoc-1.15.0 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/embark-consult-20231208.459 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/consult-20231211.2102 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/embark-20231208.459 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/emms-20231201.1643 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/erlang-20231110.1018 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/expreg-1.3.1 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/eyebrowse-20201107.955 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/fira-code-mode-20220531.1555 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/flappymacs-20171023.1004 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/flx-20221213.542 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/flycheck-20230813.620 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/gcmh-20201116.2251 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/git-gutter-fringe-20211003.2228 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/fringe-helper-20140620.2109 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/git-gutter-20220922.256 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/git-timemachine-20230630.1214 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/gnuplot-mode-20171013.1616 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/golden-ratio-20230912.1825 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/haskell-mode-20231115.1812 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/highlight-numbers-20181013.1744 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/highline-4.2 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/ht-20230703.558 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/hydra-0.15.0 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/indent-guide-20210115.400 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/insecure-lock-20230426.53 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/io-mode-20161004.756 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/io-mode-inf-20140128.1934 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/keyfreq-20231107.106 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/kurecolor-20221213.124 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/langdoc-20150218.645 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/lua-mode-20231023.947 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/lv-20200507.1518 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/magit-20231213.48 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/git-commit-20231204.1839 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/marginalia-20231206.1425 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/markdown-mode-20231130.549 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/meow-20231005.1938 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/mines-1.6 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/multiple-cursors-20230728.518 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/niceify-info-20160416.1244 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/no-littering-20231116.1216 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/olivetti-20231104.538 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/orderless-20231110.1448 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/org-anki-20231209.1447 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/org-bullets-20200317.1740 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/org-edit-latex-20170908.1522 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/auctex-13.2.3/ | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/auctex-13.2.3 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/org-gcal-20221212.1817 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/elnode-20190702.1509 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/db-20140421.2111 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/fakir-20140729.1652 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/creole-20140924.1500 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/kv-20140108.1534 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/noflet-20141102.1454 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/alert-20221213.1619 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/log4e-20211019.948 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/gntp-20141025.250 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/aio-20200610.1904 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/org-re-reveal-20231128.1730 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/htmlize-20210825.2150 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/org-roam-20230307.1721 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/magit-section-20231213.48 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/emacsql-20230417.1448 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/ox-gfm-20220910.1321 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/ox-reveal-20221127.814 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/page-break-lines-20230804.658 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/parent-mode-20150824.2300 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/parsebib-20230228.1530 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/pass-20231206.736 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/f-20231212.1323 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/password-generator-20210425.2227 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/password-store-otp-20220128.1320 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/password-store-20231201.954 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/pdf-tools-20230611.239 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/persist-0.5 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/persistent-scratch-20230225.1439 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/pkg-info-20150517.1143 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/epl-20180205.2049 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/popup-20230819.2306 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/promise-20210307.727 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/queue-0.2 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/rainbow-delimiters-20210515.1254 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/rainbow-mode-1.0.6 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/raku-mode-20210927.1227 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/request-deferred-20220614.1604 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/request-20230127.417 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/deferred-20170901.1330 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/rich-minority-20190419.1136 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/rubocop-20210309.1241 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/rust-mode-20230805.1558 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/scala-mode-20221025.1502 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/schrute-20170521.1840 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/selectric-mode-20200209.2107 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/sly-20231009.2150 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/spacious-padding-0.2.2 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/spinner-1.7.4 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/string-inflection-20220910.1306 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/sudoku-20191015.1315 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/tablist-20231019.1126 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/transient-20231205.1848 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/uiua-ts-mode-20231123.1509 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/uiua-mode-20231122.1849 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/reformatter-20231122.838 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/use-package-20230426.2324 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/bind-key-20230203.2004 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/vertico-posframe-0.7.5 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/vertico-20231207.2029 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/posframe-20230714.227 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/visual-fill-column-20230102.1830 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/web-20141231.2001 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/s-20220902.1511 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/dash-20230714.723 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/wgrep-20230203.1214 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/with-editor-20230917.958 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/compat-29.1.4.4 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/seq-2.24 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/xterm-color-20230321.3 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/yatemplate-20211115.1208 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/yasnippet-20230914.1400 | c:/Users/linyi/AppData/Roaming/.emacs.d/elpa/zotra-20231014.2139 | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/site-lisp | c:/Program Files/Emacs/emacs-29.1/share/emacs/site-lisp | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/vc | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/use-package | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/url | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/textmodes | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/progmodes | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/play | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/org | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/nxml | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/net | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/mh-e | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/mail | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/leim | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/language | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/international | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/image | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/gnus | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/eshell | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/erc | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/emulation | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/emacs-lisp | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/cedet | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/calendar | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/calc | c:/Program Files/Emacs/emacs-29.1/share/emacs/29.1/lisp/obsolete |

** =init.el='s Package Settings
I use the default =package.el= because =use-package= doesn't feel quite right.
#+begin_src emacs-lisp :tangle init.el :results silent
  (require 'package)

  (add-hook 'package-menu-mode-hook #'hl-line-mode)

  (setq package-archives
        '(("gnu-elpa" . "https://elpa.gnu.org/packages/")
          ("gnu-elpa-devel" . "https://elpa.gnu.org/devel/")
          ("nongnu" . "https://elpa.nongnu.org/nongnu/")
          ("melpa" . "https://melpa.org/packages/")))

  (setq package-archive-priorities
        '(("gnu-elpa" . 3)
          ("melpa" . 2)
          ("nongnu" . 1)))

  (setq package-install-upgrade-built-in t)
#+end_src
** =init.el='s Declare Custom Themes Safe
Emacs gives an annoying confirmation sequence whenever you load a theme, so this prevents that.
#+begin_src emacs-lisp :tangle init.el
  (setq custom-safe-themes t)
#+end_src

#+RESULTS:
: t

** =init.el='s Custom Package Manager (textbook)
I don't like =use-package=, because it parcelizes code and makes it ehh. I prefer to write actual code, with maybe only a installation package manager. Writing my own code is also fun.
#+begin_src emacs-lisp :tangle init.el
  (defun textbook-install (package &optional method)
    "installs 'package' using the optional 'method'. If 'method' is nil or 'builtin, then it won't do anything. If 'method' is a string, then it will use 'package-vc-install' to install the package. If 'method' is a list, then feed the list into 'package-vc-install'."
    (unless (or (eq method 'builtin) (null method))
      (unless (package-installed-p package)
        (when (or (stringp method) (listp method))
          (package-vc-install method))
        (unless package-archive-contents
          (package-refresh-contents))
        (package-install package))))

  (defun textbook-chapter (&rest body)
    "Returns any sexp passed to it, except for a sexp of form (:wait n), where n is a number to delay the evaluation of the code by."
    (declare (indent 0))
    (let (delay)
      (dolist (sexp body)
        (when (plistp sexp)
          (pcase (car sexp)
            (:wait (setq delay (cadr sexp)
                         body (delq sexp body))))))
      (if delay
          `(run-with-timer ,delay nil (lambda () ,body))
        `(progn ,@body))))
#+end_src

#+RESULTS:
: textbook-chapter

** =init.el='s Map Function to Hooks
Sometimes I want to add a function to multiple hooks. This accomplishes that.
#+begin_src emacs-lisp :tangle init.el
  (defun 2e-mapf-h (function hooks)
    (mapc (lambda (hook)
            (add-hook hook function))
          hooks))
#+end_src

#+RESULTS:
: 2e-mapf-h

** =init.el='s Loading of Modules
Here I load all of my modules.
#+begin_src emacs-lisp :tangle init.el
  (require '2e-essentials)
  (require '2e-progodoro)
#+end_src

* Emacs Configuration Modules
** The =2e-essentials.el= Module
This provides some basic settings on Emacs itself; no packages. Delaying this execution by 1 second will speed up the loading of Emacs. Also, I load in some custom libraries of helper functions.
#+begin_src emacs-lisp :tangle "modules/2e-essentials.el"
  (textbook-chapter
   (:delay 1)
   (require '2e-array)
#+end_src
*** =2e-essentials.el='s Sane Defaults
Just a bunch of random settings, most pulled from [cite:@coimbrab-coimbraMegumacs].
#+begin_src emacs-lisp :tangle "modules/2e-essentials.el" :results silent
  (setq-default ad-redifinition-action 'accept
                auto-window-vscroll nil
                confirm-kill-emacs 'y-or-n-p
                cursor-in-non-selected-windows nil
                delete-by-moving-to-trash t
                display-time-default-load-average nil
                display-time-format "%k:%M:%S (%Z)"
                fill-column 80
                help-window-select t
                indent-tabs-mode nil
                inhibit-startup-screen t
                initial-scratch-message ""
                mouse-yank-at-point t
                ns-use-srgb-colorspace nil
                select-enable-clipboard t
                sentence-end-double-space nil
                show-help-function nil
                show-trailing-whitespace t
                split-height-threshold 96
                split-width-threshold 26
                tab-width 4
                x-stretch-cursor nil
                delete-old-versions nil
                version-control t
                ring-bell-function 'ignore
                inhbit-compacting-font-caches t
                recentf-mode t
                make-backup-files t
                display-line-numbers-type 'relative
                vc-follow-symlinks t
                use-default-font-for-symbols nil
                frame-inhibit-implied-resize nil
                pop-up-windows nil
                blink-matching-paren nil
                delete-pair-blink-delay 0.1
                find-library-include-other-files nil
                tramp-connection-timeout (* 60 10)
                save-interprogram-paste-before-kill t
                mode-require-final-newline 'visit-save
                truncate-partial-width-windows nil
                eval-expression-print-length nil
                kill-do-not-save-duplicates t)

  (cd "~/")
  (delete-selection-mode 1)
  (display-time)
  (global-auto-revert-mode 1)
  (fringe-mode '(8 . 0))
  (electric-pair-mode t)
  (electric-indent-mode t)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-subword-mode 1)
  (mouse-avoidance-mode 'jump)
  (menu-bar-mode 0)
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (show-paren-mode 1)

  (add-hook 'calendar-mode-hook (lambda () (setq show-trailing-whitespace nil)))
#+end_src
*** =2e-essentials.el='s Mouse Config
Currently derived from Protesilaos' mouse configurations
#+begin_src emacs-lisp :tangle "modules/2e-essentials.el" :results silent
  (setq mouse-wheel-scroll-amount
        '(1
          ((shift) . 5)
          ((meta) . 0.5)
          ((control) . text-scale))
        mouse-drag-copy-region nil
        make-pointer-invisible t
        mouse-wheel-progressive-speed t
        mouse-wheel-follow-mouse t)

  (setq-default scroll-preserve-screen-position t
                scroll-conservatively 1
                scroll-margin 0
                next-screen-context-lines 0)

  (mouse-wheel-mode 1)
  (define-key global-map (kbd "C-M-<mouse-3>") #'tear-off-window)
#+end_src

#+begin_src emacs-lisp :tangle "modules/2e-essentials.el"
  )
#+end_src

** The =2e-headerline.el= Module
I actually don't use the modeline. Instead, I use the header line. The header line makes it a lot easier to actually see the information, since it's about eye-level. Also it just looks a bit nicer.
#+begin_src emacs-lisp :tangle "modules/2e-headerline.el"
  (setq-default mode-line-format nil)
#+end_src

#+RESULTS:

*** =2e-headerline.el='s Useful Inactive Header Line Functionality
One differing thing about the header line is that it doesn't have an inactive header-line face, which bothers me. This isn't perfect however, so I am refraining from using it as of now.
#+begin_src emacs-lisp :tangle "modules/2e-headerline.el"
  (defun 2e-update-header-line ()
    (mapc
     (lambda (window)
       (with-current-buffer (window-buffer window)
         ;; don't mess with buffers that don't have a header line
         (when header-line-format
           (let ((original-format (get 'header-line-format 'original))
                 (inactive-face 'mode-line-inactive)) ; change this to your favorite inactive header line face
             ;; if we didn't save original format yet, do it now
             (when (not original-format)
               (put 'header-line-format 'original header-line-format)
               (setq original-format header-line-format))
             ;; check if this window is selected, set faces accordingly
             (if (eq window (selected-window))
                 (setq header-line-format original-format)
               (setq header-line-format `(:propertize ,original-format face ,inactive-face)))))))
     (window-list)))

  (add-hook 'buffer-list-update-hook #'2e-update-header-line)
#+end_src
*** =2e-headerline.el='s String Truncation Utilities
The header line can get really long, which makes it not worthwhile. This truncates especially long parts, so that it doesn't show.
#+begin_src emacs-lisp :tangle "modules/2e-headerline.el"
  (defvar-local mode-line-truncate-length 9)

  (defun 2e-mode-line-truncate-string-p (str)
    "Returns non-nil if the string should be truncated"
    (or (< (window-total-width) split-width-threshold)
        (and (>) (length str) mode-line-truncate-length)
        (not (one-window-p :no-minibuffer))))

  (defun 2e-mode-line-truncate-string (str)
    "Returns the truncated string, else return the original string."
    (if (2e-mode-line-truncate-string-p str)
        (concat (substring str 0 mode-line-truncate-length) "...")
      str))
#+end_src
*** =2e-headerline.el='s Space Filling Utilities
Sometimes you want to right align some stuff, but you don't know how to do it. This provides an easy function to do it.
#+begin_src emacs-lisp :tangle "modules/2e-headerline.el"
  (defun 2e-mode-line-right-align (&rest right-aligned-things)
    (concat (propertize " "
                'display `(space . (:align-to (- (+ right right-fringe right-margin) ,(apply '2e-array-length right-aligned-things)))))))
#+end_src
*** =2e-headerline.el='s Save State Icon
The default modeline has a symbol that shows if the buffer is modified, or if it's saved. However, the symbol is hard to decipher, so by using all-the-icons, we can alter the symbols into something more digestable.
#+begin_src emacs-lisp :tangle "modules/2e-headerline.el"
  (defun 2e-mode-line-modified ()
    "Returns an all-the-icons icon based on the modified state of the buffer."
    (let* ((config-alist '(("*" all-the-icons-faicon "chain-broken" :height 1.2 :v-adjust -0.0)
                           ("-" all-the-icons-faicon "link" :height 1.2 :v-adjust -0.0)
                           ("%" all-the-icons-faicon "lock" :height 1.2 :v-adjust 0.1)))
           (result (cdr (assoc (format-mode-line "%*") config-alist))))
      (propertize (format "%s" (apply (car result (cdr result))))
                  'face `(:family ,(all-the-icons-faicon-family)))))
#+end_src
*** =2e-headerline.el='s Buffer/Region Information
This just gives the line / character count for the buffer, or the region, depending on if there's a selected region or not.
#+begin_src emacs-lisp :tangle "modules/2e-headerline.el"
  (defvar mark-change nil)

  (defadvice handle-shift-selection (after region-info () activate)
    "Changes mark-change for 0.1 seconds to indicate a mark-change."
    (setq mark-change t)
    (run-with-timer 0.1 nil (lambda () (setq mark-change nil))))

  (defun 2e-mode-line-buffer-region-info ()
    "Returns a string containing information from the current region, if there is any. The left number is the lines in the region, and the right number is the characters in the region."
    (if (or mark-change mark-active)
        (let ((lines (count-lines (region-beginning) (region-end)))
              (chars (- (region-end) (region-beginning))))
          (concat (propertize (format "%s" (all-the-icons-octicon "pencil"))
                              'face `(:family ,(all-the-icons-octicon-family)
                                              'display `(raise -0.0)))
                  (propertize (format "%s:%s" lines chars)
                              'face `(:height 0.9))))
      (concat (propertize (format "%s" (all-the-icons-octicon "pencil"))
                          'face `(:family ,(all-the-icons-octicon-family))
                          'display `(raise -0.0))
              (propertize (concat (format "%s:" (car (buffer-line-statistics)))
                                  "%i")
                          'face `(:height 0.9)))))
#+end_src
*** =2e-headerline.el='s Buffer Name
#+begin_src emacs-lisp :tangle "modules/2e-headerline.el"
  (defun 2e-mode-line-buffer-name ()
    (format "%s" (propertize (2e-mode-line-truncate-string (buffer-name))
                             'face `(:foreground "#DFFFEE"))))
#+end_src
*** =2e-headerline.el='s Major Mode Icon
#+begin_src emacs-lisp :tangle "modules/2e-headerline.el"
  (defun 2e-mode-line-mode-icon ()
    "Returns the major mode icon of the buffer."
    (propertize (format "%s" (all-the-icons-icon-for-mode major-mode :v-adjust 0.0))
                'face `(:height 170 :family ,(all-the-icons-icon-family-for-buffer))))
#+end_src
*** =2e-headerline.el='s Version Control Branch
#+begin_src emacs-lisp :tangle "modules/2e-headerline.el"
  (defun 2e-mode-line-mode-vc-info ()
    (if vc-mode
        (let ((branch (cdr (string-split vc-mode "[:-]"))))
          (concat "("
                  (2e-mode-line-mode-icon)
                  ", "
                  (propertize (2e-mode-line-truncate-string (format "#%s" branch))
                              'face `(:height 0.9))
                  ")"))
      (2e-mode-line-mode-icon)))
#+end_src
*** =2e-headerline.el='s Timer
This is probably temporary. Once I finish my timer working system, then I might change this.
#+begin_src emacs-lisp :tangle "modules/2e-headerline.el"
  (require 'org-timer)
  (defun 2e-mode-line-org-timer ()
    (propertize (format "Timer: %s" (org-timer-value-string))
                'face `(:weight bold)))
#+end_src
*** =2e-headerline.el='s Date / Time Displays
I need to know the time.
#+begin_src emacs-lisp :tangle "modules/2e-headerline.el"
  (defun 2e-mode-line-date-time ()
    "Returns the time with the associated clock icon after it."
    (let* ((hour (string-to-number (format-time-string "%I")))
           (icon (all-the-icons-wicon (format "time-%s" hour) :height 1.3 :v-adjust 0.0)))
      (concat (propertize (format-time-string "[%d/%a] %k:%M:%S ")
                          'face `(:height 0.9))
              (propertize (format "%s " icon)
                          'face `(:height 1.0 :family ,(all-the-icons-wicon-family))
                          'display `(raise -0.0)))))
#+end_src
*** =2e-headerline.el='s Header-Line Format
#+begin_src emacs-lisp :tangle "modules/2e-headerline.el"
  (setq-default header-line-format
                '("%e"
                  (:eval (2e-mode-line-modified))))
#+end_src
** The =2e-array.el= Module
This module provides library functions for array functions, i.e., functions that apply over an entire list, e.g. a length function that provides the sum of all the lengths in a list.
*** =2e-array.el='s Array Length Function
#+begin_src emacs-lisp :tangle "modules/2e-array.el"
  (defun 2e-array-length (&rest args)
    "Finds the sum of all the lengths of the arguments passed into it. Works for only sequences and lists -- for lists, it'll go through the list's elements."
    (if (null (car args))
        0
      (+ (length (car args)) (apply '2e-array-length (cdr args)))))
#+end_src

#+RESULTS:
: 2e-array-length

** The =2e-completion.el= Module
A big part of Emacs is completion, whether for a function, or on point. I use the 'vertico' package, along with its parts, 'consult', 'embark', 'marginalia', 'orderless', 'cape', and 'corfu'.
*** =2e-completion.el='s Vertico Setup
#+begin_src emacs-lisp :tangle "modules/2e-completion.el" :results silent
  (require 'vertico-posframe)
  (vertico-mode 1)
  (vertico-posframe-mode 1)
  (vertico-reverse-mode 1)
  (vertico-mouse-mode 1)
  (setq vertico-count 15)
  (setq vertico-resize 'grow-only)
  (setq vertico-cycle t)
  (global-set-key (kbd "S-<return>") 'vertico-exit-input)

  ;; Changes the color of the minibuffer.
  (add-hook 'minibuffer-setup-hook
            (lambda ()
              (make-local-variable 'face-remapping-alist)
              (add-to-list 'face-remapping-alist '(default (:background "#261010")))))
#+end_src
*** =2e-completion.el='s Consult Setup
#+begin_src emacs-lisp :tangle "modules/2e-completion.el" :results silent
  (require 'consult)

#+end_src
*** =2e-completion.el='s Orderless Setup
Orderless is a package for searching for something using an orderless pattern.
#+begin_src emacs-lisp :tangle "modules/2e-completion.el" :results silent
  (require 'orderless)
  (setq completion-styles '(orderless basic))
  (setq completion-category-overrides '((file (styles basic partial-completion))))
  (setq orderless-component-separator #'orderless-escapable-split-on-space)

#+end_src

** The =2e-org-mode.el= Module
This module attempts to make org mode feel nicer to use, and easier on the eyes. This will be done in several ways:
 - Replacing headline stars with alternate bullet points
 - Previewing LaTeX fragments
 - Previewing images
To accomplish this, I use source code and ideas from packages such as Org Modern.
*** =2e-org-mode.el='s Requiring Dependencies
#+begin_src emacs-lisp :tangle "modules/2e-org-mode.el"
  (require 'compat)
  (require 'org)
  (require 'cl-lib)
  (require 'subr-x)
#+end_src
*** =2e-org-mode.el='s Initializing Variables
We introduce several variables that make the computing easier.
#+begin_src emacs-lisp :tangle "modules/2e-org-mode.el"
  (defvar 2e-modern-star '("☞"))
  (defvar-local 2e-modern--star-cache nil)
  (defvar-local 2e-modern--hide-star-cache nil)
#+end_src
*** =2e-org-mode.el='s Prettify Headline Stars
Headlines can be annoying to look at, because of the amount of stars and the headlines all being the same font size.
#+begin_src emacs-lisp :tangle "modules/2e-org-mode.el"
  (defun 2e-modern--star ()
    "Prettify headline stars, according to org-modern."
    (let* ((beg (match-beginning 1)) ; Returns position of the first match of the last search
           (end (match-end 1))       ; Returns position of the end of the match
           (level (- end beg)))      ; Gets the level (length) of the match
      (when (and 2e-modern--hide-star-cache (not (eq beg end)))
        (cl-loop for i from beg below end do
                 (put-text-property i (1+ i) 'display
                                    (nth (logand i 1)
                                         2e-modern--hide-star-cache))))
      (put-text-property beg (1+ end) 'face (get-text-property end 'face))
      (put-text-property beg (1+ end) 'display
                         (aref 2e-modern--star-cache
                               (min (1- (length 2e-modern--star-cache)) level)))))
#+end_src

** The =2e-keyboard.el= Module
Normal Emacs keybindings kind of suck ass.

* Bibliography
#+print_bibliography:
